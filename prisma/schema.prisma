// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// AUTHENTICATION & USER MANAGEMENT
// ========================================

model User {
  id            String   @id @default(cuid())
  clerkId       String   @unique // Clerk user ID
  email         String   @unique
  firstName     String?
  lastName      String?
  avatar        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // User preferences and settings
  currency      String   @default("INR")
  timezone      String   @default("Asia/Kolkata")
  monthlyIncome Decimal  @default(0) @db.Decimal(10, 2)
  
  // Relationships
  expenses      Expense[]
  incomes       Income[]
  debts         Debt[]
  subscriptions Subscription[]
  budgets       Budget[]
  goals         Goal[]
  categories    Category[]
  savings       Savings[]

  @@map("users")
}

// ========================================
// EXPENSE & INCOME MANAGEMENT
// ========================================

model Category {
  id          String   @id @default(cuid())
  name        String
  icon        String?  // Emoji or icon
  color       String?  // Hex color code
  type        CategoryType @default(EXPENSE)
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses    Expense[]
  incomes     Income[]

  @@unique([name, userId])
  @@map("categories")
}

model Expense {
  id          String   @id @default(cuid())
  amount      Decimal  @db.Decimal(10, 2)
  description String?
  merchant    String?
  location    String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  @@map("expenses")
}

model Income {
  id          String   @id @default(cuid())
  amount      Decimal  @db.Decimal(10, 2)
  description String?
  source      String?  // e.g., "Salary", "Freelance", "Investment"
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  @@map("incomes")
}

// ========================================
// DEBT MANAGEMENT (KATHA)
// ========================================

model Debt {
  id          String   @id @default(cuid())
  type        DebtType // LENT or BORROWED
  person      String   // Name of the person
  amount      Decimal  @db.Decimal(10, 2)
  description String?
  date        DateTime @default(now())
  dueDate     DateTime?
  status      DebtStatus @default(PENDING)
  category    String?  // e.g., "personal", "business"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("debts")
}

// ========================================
// SUBSCRIPTION MANAGEMENT
// ========================================

model Subscription {
  id          String   @id @default(cuid())
  name        String
  amount      Decimal  @db.Decimal(10, 2)
  logo        String?  // Emoji or icon
  type        SubscriptionType @default(SUBSCRIPTION)
  frequency   BillingFrequency @default(MONTHLY)
  dueDate     DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// ========================================
// BUDGET & GOAL MANAGEMENT
// ========================================

model Budget {
  id          String   @id @default(cuid())
  month       Int      // 1-12
  year        Int
  amount      Decimal  @db.Decimal(10, 2)
  spent       Decimal  @default(0) @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month, year])
  @@map("budgets")
}

model Goal {
  id          String   @id @default(cuid())
  name        String
  targetAmount Decimal  @db.Decimal(10, 2)
  currentAmount Decimal @default(0) @db.Decimal(10, 2)
  targetDate   DateTime?
  description  String?
  icon         String?  // Emoji or icon
  color        String?  // Hex color code
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

// ========================================
// ENUMS
// ========================================

enum CategoryType {
  EXPENSE
  INCOME
}

enum DebtType {
  LENT
  BORROWED
}

enum DebtStatus {
  PENDING
  SETTLED
}

enum SubscriptionType {
  SUBSCRIPTION
  BILL
  LOAN
}

enum BillingFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

model Savings {
  id          String   @id @default(cuid())
  amount      Decimal  @db.Decimal(10, 2)
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("savings")
}
